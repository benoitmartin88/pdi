diff -urN ../MPlayer-1.0rc1/input/flowvr.cpp ./input/flowvr.cpp
--- ../MPlayer-1.0rc1/input/flowvr.cpp	1970-01-01 01:00:00.000000000 +0100
+++ ./input/flowvr.cpp	2007-04-22 15:15:22.000000000 +0200
@@ -0,0 +1,72 @@
+
+extern "C" {
+#include "../config.h"
+
+#include "../mp_msg.h"
+#include "../help_mp.h"
+#include "input.h"
+}
+
+#include <flowvr/module.h>
+
+static flowvr::ModuleAPI *flowvr_module;
+static flowvr::InputPort *flowvr_port;
+static int last_it = -1;
+
+extern "C"
+int
+mp_input_flowvr_init(void) {
+  
+  std::vector<flowvr::Port *> ports;
+  flowvr_port = new flowvr::InputPort("in");
+  ports.push_back(flowvr_port);
+
+  flowvr_module = flowvr::initModule(ports,"IN");
+
+  return flowvr_module ? 1 : 0;
+
+}
+
+extern "C"
+int
+mp_input_flowvr_read(int fd, char *dest, int s) {
+  if (!flowvr_module)
+    return MP_INPUT_NOTHING;
+  
+  flowvr::Message m;
+  if (!flowvr_module->wait())
+    return MP_INPUT_DEAD;
+  flowvr_module->get(flowvr_port, m);
+
+  if (!m.valid())
+    return MP_INPUT_NOTHING;
+
+  int it;
+  m.stamps.read(flowvr_port->stamps->it,it);
+  if (last_it == it) 
+    return MP_INPUT_NOTHING;
+  last_it = it;
+
+  int size = (m.data.getSize() > s) ? s : m.data.getSize();
+  
+  if (size == 0)
+    return MP_INPUT_NOTHING;
+
+  memcpy(dest, m.data.getRead<char>(0), size);
+
+  dest[size] = '\0';
+  
+  std::cerr << "FLOWVR: " << dest << std::endl;
+
+  return m.data.getSize();
+
+}
+
+extern "C"
+void
+mp_input_flowvr_close(int fd) {
+
+  if (flowvr_module)
+    flowvr_module->close();
+
+}
diff -urN ../MPlayer-1.0rc1/input/flowvr.h ./input/flowvr.h
--- ../MPlayer-1.0rc1/input/flowvr.h	1970-01-01 01:00:00.000000000 +0100
+++ ./input/flowvr.h	2007-04-22 15:15:22.000000000 +0200
@@ -0,0 +1,8 @@
+int
+mp_input_flowvr_init(void);
+
+int
+mp_input_flowvr_read(int fd, char *dest, int s);
+
+void
+mp_input_flowvr_close(int fd);
diff -urN ../MPlayer-1.0rc1/input/input.c ./input/input.c
--- ../MPlayer-1.0rc1/input/input.c	2006-10-23 00:32:25.000000000 +0200
+++ ./input/input.c	2007-04-22 15:21:11.000000000 +0200
@@ -35,6 +35,8 @@
 #include <lirc/lircc.h>
 #endif
 
+#include <flowvr.h>
+
 /// This array defines all known commands.
 /// The first field is an id used to recognize the command without too many strcmp.
 /// The second is obviously the command name.
@@ -497,7 +499,7 @@
 static mp_cmd_t* ar_cmd = NULL;
 static unsigned int ar_delay = 100, ar_rate = 8, last_ar = 0;
 
-static int use_joystick = 1, use_lirc = 1, use_lircc = 1;
+static int use_joystick = 1, use_lirc = 1, use_lircc = 1, use_flowvr = 1;
 static char* config_file = "input.conf";
 
 static char* js_dev = NULL;
@@ -528,6 +530,8 @@
   { "lirc", &use_lirc, CONF_TYPE_FLAG, CONF_GLOBAL, 0, 1, NULL },
   { "nolircc", &use_lircc, CONF_TYPE_FLAG, CONF_GLOBAL, 1, 0, NULL },
   { "lircc", &use_lircc, CONF_TYPE_FLAG, CONF_GLOBAL, 0, 1, NULL },
+  { "noflowvr", &use_flowvr, CONF_TYPE_FLAG, CONF_GLOBAL, 1, 0, NULL },
+  { "flowvr", &use_flowvr, CONF_TYPE_FLAG, CONF_GLOBAL, 0, 1, NULL },
   { NULL, NULL, 0, 0, 0, 0, NULL}
 };
 
@@ -1650,6 +1654,12 @@
   }
 #endif
 
+  if(use_flowvr) {
+    int fd = mp_input_flowvr_init();
+    if(fd > 0)
+      mp_input_add_cmd_fd(fd,0,mp_input_flowvr_read,mp_input_flowvr_close);
+  }
+
   if(in_file) {
     struct stat st;
     if(stat(in_file,&st))
diff -urN ../MPlayer-1.0rc1/input/Makefile ./input/Makefile
--- ../MPlayer-1.0rc1/input/Makefile	2006-10-23 00:32:25.000000000 +0200
+++ ./input/Makefile	2007-04-22 15:23:54.000000000 +0200
@@ -10,19 +10,25 @@
 ifeq ($(LIRC),yes)
 SRCS += lirc.c
 endif
+CXX_SRCS = flowvr.cpp
 
 OBJS=$(SRCS:.c=.o)
+CXX_OBJS=$(CXX_SRCS:.cpp=.o)
 
 CFLAGS  = -I. -I.. $(OPTFLAGS)
+CXXFLAGS = $(CFLAGS) $(FLOWVR_INC)
 
 .SUFFIXES: .c .o
 
 
 .c.o:
 	$(CC) -c $(CFLAGS) -o $@ $<
+.cpp.o:
+	$(CXX) -c $(CXXFLAGS) -o $@ $<
 
-$(LIBNAME):     $(OBJS)
-	$(AR) r $(LIBNAME) $(OBJS)
+
+$(LIBNAME):     $(OBJS) $(CXX_OBJS)
+	$(AR) r $(LIBNAME) $(OBJS) $(CXX_OBJS)
 	$(RANLIB) $(LIBNAME)
 
 all:    $(LIBNAME)
diff -urN ../MPlayer-1.0rc1/libvo/Makefile ./libvo/Makefile
--- ../MPlayer-1.0rc1/libvo/Makefile	2006-10-23 00:32:26.000000000 +0200
+++ ./libvo/Makefile	2007-04-22 15:28:06.000000000 +0200
@@ -15,6 +15,8 @@
      vo_yuv4mpeg.c \
      $(VO_SRCS) \
 
+CXX_SRC=vo_flowvr.cpp
+
 LIBAV_INC =
 ifeq ($(CONFIG_LIBAVUTIL),yes)
 LIBAV_INC += -I../libavutil
@@ -22,6 +24,7 @@
 
 OBJS_TEMP=$(basename $(SRCS))
 OBJS=$(OBJS_TEMP:%=%.o)
+CXX_OBJS=$(CXX_SRC:%.cpp=%.o)
 
 ifeq ($(BITMAP_FONT),yes)
 SRCS += font_load.c
@@ -43,19 +46,23 @@
 CFLAGS  = $(INCLUDE) $(OPTFLAGS) -DMPG12PLAY
 
 #CFLAGS += -Wall
+CXXFLAGS = $(CFLAGS) $(FLOWVR_INC)
 
-.SUFFIXES: .c .o .m
+.SUFFIXES: .c .o .m .cpp
 
 # .PHONY: all clean
 
 .c.o:
 	$(CC) -c $(CFLAGS) -o $@ $<
 
+.cpp.o:
+	$(CXX) -c $(CXXFLAGS) -o $@ $<
+
 .m.o:
 	$(CC) -c $(CFLAGS) -o $@ $<
 
-$(LIBNAME):     $(OBJS)
-	$(AR) r $(LIBNAME) $(OBJS)
+$(LIBNAME):     $(OBJS) $(CXX_OBJS)
+	$(AR) r $(LIBNAME) $(OBJS) $(CXX_OBJS)
 	$(RANLIB) $(LIBNAME)
 
 all:    $(LIBNAME)
diff -urN ../MPlayer-1.0rc1/libvo/video_out.c ./libvo/video_out.c
--- ../MPlayer-1.0rc1/libvo/video_out.c	2006-10-23 00:32:26.000000000 +0200
+++ ./libvo/video_out.c	2007-04-22 15:26:03.000000000 +0200
@@ -140,6 +140,7 @@
 #ifdef HAVE_MD5SUM
 extern vo_functions_t video_out_md5sum;
 #endif
+extern vo_functions_t video_out_flowvr;
 
 vo_functions_t* video_out_drivers[] =
 {
@@ -266,6 +267,7 @@
 #ifdef HAVE_MD5SUM
     &video_out_md5sum,
 #endif
+	&video_out_flowvr,
         NULL
 };
 
diff -urN ../MPlayer-1.0rc1/libvo/vo_flowvr.cpp ./libvo/vo_flowvr.cpp
--- ../MPlayer-1.0rc1/libvo/vo_flowvr.cpp	1970-01-01 01:00:00.000000000 +0100
+++ ./libvo/vo_flowvr.cpp	2007-04-22 15:15:41.000000000 +0200
@@ -0,0 +1,536 @@
+/* ------------------------------------------------------------------------- */
+
+/* 
+ * vo_flowvr.c, FlowVR/FlowVR Render Video Output Driver for MPlayer
+ *
+ * 
+ * Written by Clement Menier, base on vo_png work by Ivo van Poorten.
+ * (C) Copyright 2004, 2005.
+ * Licensed under GNU General Public License version 2.
+ *
+ *
+ * Changelog
+ * 
+ * 2004-01-15   Replaced suboption parser by call to subopt-helper.
+ *              Got rid of stupid malloc_failed function.
+ * 2004-09-16   Second draft. It now acts on VOCTRL_DRAW_IMAGE and does not
+ *              maintain a local copy of the image if the format is YV12.
+ *              Speed improvement and uses less memory.
+ * 2004-09-09   First draft.
+ *
+ *
+ */
+
+/* ------------------------------------------------------------------------- */
+
+/* Global Includes */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <sys/stat.h>
+
+/* ------------------------------------------------------------------------- */
+
+/* Local Includes */
+
+extern "C" {
+#include "config.h"
+#include "subopt-helper.h"
+#include "mp_msg.h"
+#include "video_out.h"
+#include "video_out_internal.h"
+#include "mplayer.h"			/* for exit_player() */
+#include "help_mp.h"
+}
+
+#include <flowvr/module.h>
+#include <flowvr/render/chunk.h>
+#include <flowvr/render/chunkwriter.h>
+
+/* ------------------------------------------------------------------------- */
+
+/* Defines */
+
+using namespace flowvr::render;
+using flowvr::ID;
+
+/* ------------------------------------------------------------------------- */
+
+/* Info */
+
+static vo_info_t info=
+{
+	"FlowVR",
+	"flowvr",
+	"Clement Menier (Clement.Menier@inrialpes.fr)",
+	""
+};
+
+extern "C"
+LIBVO_EXTERN (flowvr)
+
+/* ------------------------------------------------------------------------- */
+
+/* Global Variables */
+
+static char *flowvr_port_name = NULL;
+static bool front = false;
+
+static flowvr::ModuleAPI *flowvr_module = NULL;
+static flowvr::StampInfo *flowvr_pr_stamp = NULL;
+static float pixel_ratio = 1;
+static ChunkRenderWriter scene;
+static SceneOutputPort *flowvr_scene_port = NULL;
+static ID idP, idT, idTY, idTU, idTV, idVB, idIB, idVS, idPS, idPS_R, idPS_YUV, idPS_YUV_R;
+
+static float ratio = 1;
+static int last_nx=0;
+static int last_ny=0;
+static bool last_rect = false;
+static BBox b;
+static Vec3f position(0,0,0);
+static int dataType[2] = { Type::Vec3f, Type::Vec2f };
+static int gen = 0;
+static bool last_yv12 = false;
+
+struct Vertex
+{
+  Vec3f pos;
+  Vec2f uv;
+};
+
+
+static bool isPow2(int x)
+{
+  return (x&(x-1))==0;
+}
+
+/** \brief Pre-initialisation.
+ *
+ * This function is called before initialising the video output driver. It
+ * parses all suboptions and sets variables accordingly. If an error occurs
+ * (like an option being out of range, not having any value or an unknown
+ * option is stumbled upon) the player will exit.
+ *
+ * \param arg   A string containing all the suboptions passed to the video
+ *              output driver.
+ *
+ * \return 0    All went well.
+ */
+
+static int preinit(const char *arg)
+{
+
+    opt_t subopts[] = {
+        {"port",        OPT_ARG_MSTRZ,  &flowvr_port_name,     NULL, 0},
+        {NULL, 0, NULL, NULL, 0}
+    };
+
+    const char *info_message = NULL;
+
+    mp_msg(MSGT_VO, MSGL_INFO, "%s: %s\n", info.short_name,
+                                            MSGTR_VO_ParsingSuboptions);
+
+    if (subopt_parse(arg, subopts) != 0) {
+        return -1;
+    }
+
+    mp_msg(MSGT_VO, MSGL_INFO, "%s: %s\n", info.short_name, "Viewer.");
+
+    if (!flowvr_port_name) flowvr_port_name = strdup("scene");
+
+    std::vector<flowvr::Port*> ports;
+    flowvr_scene_port = new SceneOutputPort(flowvr_port_name);
+    ports.push_back(flowvr_scene_port);
+    flowvr_module = flowvr::initModule(ports);
+
+    if (flowvr_module) {
+      int matrix = ChunkPrimParam::ModelViewProjection;
+      if (front)
+	matrix = ChunkPrimParam::ChunkPrimParam::Projection;
+      
+      idP = flowvr_module->generateID();
+      idT = flowvr_module->generateID();
+      idTY = flowvr_module->generateID();
+      idTU = flowvr_module->generateID();
+      idTV = flowvr_module->generateID();
+      idVB = flowvr_module->generateID();
+      idIB = flowvr_module->generateID();
+      idVS = flowvr_module->generateID();
+      idPS = flowvr_module->generateID();
+      idPS_R = flowvr_module->generateID();
+      idPS_YUV = flowvr_module->generateID();
+      idPS_YUV_R = flowvr_module->generateID();
+
+       unsigned int nx = 800;
+       unsigned int ny = 600;
+      
+      ChunkTexture* texture = scene.addTexture(idT, ChunkTexture::RGB|ChunkTexture::RECT, Type::Vec3b, nx, ny);
+      texture->level = 0; // no mipmap
+      texture->gen = 0;
+      
+      int imgtype = ChunkTexture::Grayscale|ChunkTexture::RECT;
+      int pixtype = Type::Byte;
+      ChunkTexture* textureY = scene.addTexture(idTY, imgtype, pixtype, nx, ny);
+      textureY->level = 0; // no mipmap
+      textureY->gen = 0;
+      
+      ChunkTexture* textureU = scene.addTexture(idTU, imgtype, pixtype, nx, ny);
+      textureU->level = 0; // no mipmap
+      textureU->gen = 0;
+      
+      ChunkTexture* textureV = scene.addTexture(idTV, imgtype, pixtype, nx, ny);
+      textureV->level = 0; // no mipmap
+      textureV->gen = 0;
+      
+      gen++;
+      
+      if (!front) b=BBox(Vec3f(-1,-1,0)+position,Vec3f(1,1,0)+position);
+      ChunkVertexBuffer* vb = scene.addVertexBuffer(idVB, 4, 2, dataType, b);
+      vb->gen=gen;
+      Vertex* vertex = (Vertex*)vb->data();
+      vertex[0].pos = Vec3f(-1,-1,0)+position; vertex[0].uv = Vec2f(0,1);
+      vertex[1].pos = Vec3f( 1,-1,0)+position; vertex[1].uv = Vec2f(1,1);
+      vertex[2].pos = Vec3f( 1, 1,0)+position; vertex[2].uv = Vec2f(1,0);
+      vertex[3].pos = Vec3f(-1, 1,0)+position; vertex[3].uv = Vec2f(0,0);
+      
+      ChunkIndexBuffer* ib = scene.addIndexBuffer(idIB, 4, Type::Byte, ChunkIndexBuffer::Quad);
+      unsigned char* ind = (unsigned char*)ib->data();
+      ind[0] = 0;
+      ind[1] = 1;
+      ind[2] = 2;
+      ind[3] = 3;
+      
+      scene.loadVertexShader(idVS, "shaders/video_v.cg");
+      scene.loadPixelShader(idPS_YUV_R, "shaders/video_yuv_rect_p.cg");
+      
+      scene.addPrimitive(idP,"Video");
+      scene.addParamID(idP, ChunkPrimParam::VSHADER,"",idVS);
+      scene.addParamID(idP, ChunkPrimParam::PSHADER,"",idPS);
+      scene.addParamID(idP, ChunkPrimParam::VBUFFER_ID,"position",idVB);
+      scene.addParamID(idP, ChunkPrimParam::VBUFFER_ID,"texcoord0",idVB);
+      scene.addParamID(idP, ChunkPrimParam::VBUFFER_NUMDATA,"texcoord0",1);
+      scene.addParamID(idP, ChunkPrimParam::IBUFFER_ID,"",idIB);
+      scene.addParamEnum(idP, ChunkPrimParam::PARAMVSHADER, "Proj", ChunkPrimParam::Projection);
+      //scene.addParamEnum(idP, ChunkPrimParam::PARAMVSHADER, "ModelViewProj", ChunkPrimParam::ModelViewProjection);
+      scene.addParamEnum(idP, ChunkPrimParam::PARAMVSHADER, "ModelViewProj", matrix);
+      scene.addParamID(idP, ChunkPrimParam::TEXTURE, "texture", idT);
+      scene.addParamID(idP, ChunkPrimParam::TEXTURE, "textureY", idTY);
+      scene.addParamID(idP, ChunkPrimParam::TEXTURE, "textureU", idTU);
+      scene.addParamID(idP, ChunkPrimParam::TEXTURE, "textureV", idTV);
+      if (front)
+      {
+	scene.addParam(idP,ChunkPrimParam::ORDER,"",-10);
+	scene.addParam(idP,ChunkPrimParam::PARAMOPENGL,"DepthTest",false);
+	scene.addParam(idP,ChunkPrimParam::PARAMOPENGL,"DepthWrite",false);
+      }
+      
+      scene.put(flowvr_scene_port);
+    }
+    
+    
+    mp_msg(MSGT_VO, MSGL_INFO, "%s: %s\n", info.short_name,
+	   MSGTR_VO_SuboptionsParsedOK);
+    return 0;
+}
+
+/* ------------------------------------------------------------------------- */
+
+/* ------------------------------------------------------------------------- */
+
+/** \brief Configure the video output driver.
+ *
+ * This functions configures the video output driver. It determines the
+ * width and height of the image(s) and creates the output directory.
+ *
+ *  \return 0             All went well.
+ */
+
+static int config(uint32_t width, uint32_t height, uint32_t d_width,
+		  uint32_t d_height, uint32_t fullscreen, char *title,
+		  uint32_t format)
+{
+
+    pixel_ratio = (float(width)/d_width)/(float(height)/d_height);
+
+    if (vo_config_count > 0 ) { /* Already configured */
+        return 0;
+    }
+
+    return 0;
+}
+
+/** \brief Sends a texture on the flowvr output port.
+ *
+ * \param mpi       The image to write.
+ *
+ * \return none     The player will exit if anything goes wrong.
+ */
+
+void flowvr_send_texture(mp_image_t *mpi)
+{
+    bool scratch = true;
+    int nx = mpi->w;
+    int ny = mpi->h;
+    uint8_t *rgbimage = mpi->planes[0];
+
+    if (!flowvr_module) {
+      mp_msg(MSGT_VO, MSGL_ERR, "Image sent %dx%d", nx, ny);
+      return;
+    }
+      
+    if (!flowvr_module->wait())
+        exit_player(MSGTR_Exit_error);
+    
+    int imgtype = ChunkTexture::RGB|ChunkTexture::RECT;
+    int pixtype = Type::Vec3b;
+    
+    ChunkTexture* texture = scene.addTexture(idT, imgtype, pixtype, nx, ny);
+    
+    float newRatio = (float)nx/(float)(ny*pixel_ratio);
+    
+    if (newRatio != ratio)
+    {
+      ratio = newRatio;
+      scratch = false;
+      //scene.addParam(idP,ChunkPrimParam::TRANSFORM_SCALE,"",Vec3f(newRatio,1,1));
+      if (!front) b=BBox(Vec3f(-ratio,-1,0)+position,Vec3f(ratio,1,0)+position);
+      ChunkVertexBuffer* vb = scene.addVertexBuffer(idVB, 4, 2, dataType, b);
+      vb->gen=gen;
+      Vertex* vertex = (Vertex*)vb->data();
+      vertex[0].pos = Vec3f(-ratio,-1,0)+position; vertex[0].uv = Vec2f(0,1);
+      vertex[1].pos = Vec3f( ratio,-1,0)+position; vertex[1].uv = Vec2f(1,1);
+      vertex[2].pos = Vec3f( ratio, 1,0)+position; vertex[2].uv = Vec2f(1,0);
+      vertex[3].pos = Vec3f(-ratio, 1,0)+position; vertex[3].uv = Vec2f(0,0);
+    }
+
+    // Check if power of two and square
+
+    bool rect (nx != ny || !isPow2(nx));
+
+    if (rect)
+    {
+      if (!last_rect || last_yv12) {
+	scratch = false;
+	scene.addParamID(idP, ChunkPrimParam::PSHADER,"",idPS_R);
+      }
+      if (last_nx != nx || last_ny != ny) {
+	scratch = false;
+	scene.addParam(idP, ChunkPrimParam::PARAMPSHADER,"texsize",Vec2f(nx,ny));
+      }
+    }
+    else
+    {
+      if (last_rect || last_yv12) {
+	scratch = false;
+	scene.addParamID(idP, ChunkPrimParam::PSHADER,"",idPS);
+      }
+    }
+
+    texture->level = 0; // no mipmap
+    texture->gen = gen++;
+    // TODO: Optimize
+    memcpy(texture->data(),rgbimage,texture->dataSize());
+
+    scene.put(flowvr_scene_port, scratch);
+
+    last_nx = nx;
+    last_ny = ny;
+    last_rect = rect;
+
+    last_yv12 = false;
+
+}
+
+/** \brief Sends a texture on the flowvr output port.
+ *
+ * \param mpi       The image to write.
+ *
+ * \return none     The player will exit if anything goes wrong.
+ */
+
+void flowvr_send_texture_yv12(mp_image_t *mpi)
+{
+    bool scratch = true;
+    int nx = mpi->w;
+    int ny = mpi->h;
+    uint8_t *planeY = mpi->planes[0];
+    uint8_t *planeU = mpi->planes[1];
+    uint8_t *planeV = mpi->planes[2];
+    uint32_t strideY = mpi->stride[0];
+    uint32_t strideU = mpi->stride[1];
+    uint32_t strideV = mpi->stride[2];
+
+    if (!flowvr_module) {
+      mp_msg(MSGT_VO, MSGL_ERR, "Image sent %dx%d", nx, ny);
+      return;
+    }
+      
+    if (!flowvr_module->wait())
+        exit_player(MSGTR_Exit_error);
+    
+    int imgtype = ChunkTexture::Grayscale|ChunkTexture::RECT;
+    int pixtype = Type::Byte;
+    
+    ChunkTexture* textureY = scene.addTexture(idTY, imgtype, pixtype, nx, ny);
+    ChunkTexture* textureU = scene.addTexture(idTU, imgtype, pixtype, nx/2, ny/2);
+    ChunkTexture* textureV = scene.addTexture(idTV, imgtype, pixtype, nx/2, ny/2);
+    
+    float newRatio = (float)nx/(float)(ny*pixel_ratio);
+    
+    if (newRatio != ratio)
+    {
+      ratio = newRatio;
+      scratch = false;
+      //scene.addParam(idP,ChunkPrimParam::TRANSFORM_SCALE,"",Vec3f(newRatio,1,1));
+      if (!front) b=BBox(Vec3f(-ratio,-1,0)+position,Vec3f(ratio,1,0)+position);
+      ChunkVertexBuffer* vb = scene.addVertexBuffer(idVB, 4, 2, dataType, b);
+      vb->gen=gen;
+      Vertex* vertex = (Vertex*)vb->data();
+      vertex[0].pos = Vec3f(-ratio,-1,0)+position; vertex[0].uv = Vec2f(0,1);
+      vertex[1].pos = Vec3f( ratio,-1,0)+position; vertex[1].uv = Vec2f(1,1);
+      vertex[2].pos = Vec3f( ratio, 1,0)+position; vertex[2].uv = Vec2f(1,0);
+      vertex[3].pos = Vec3f(-ratio, 1,0)+position; vertex[3].uv = Vec2f(0,0);
+    }
+
+    // Check if power of two and square
+
+    bool rect (nx != ny || !isPow2(nx));
+
+    if (rect)
+    {
+      if (!last_rect || !last_yv12) {
+	scratch = false;
+	scene.addParamID(idP, ChunkPrimParam::PSHADER,"",idPS_YUV_R);
+      }
+      if (last_nx != nx || last_ny != ny) {
+	scratch = false;
+	scene.addParam(idP, ChunkPrimParam::PARAMPSHADER,"texsize",Vec2f(nx,ny));
+      }
+    }
+    else
+    {
+      if (last_rect || !last_yv12) {
+	scratch = false;
+	scene.addParamID(idP, ChunkPrimParam::PSHADER,"",idPS_YUV);
+      }
+    }
+
+    textureY->level = 0; // no mipmap
+    textureY->gen = gen++;
+    // TODO: Optimize
+    memcpy(textureY->data(),planeY,textureY->dataSize());
+
+    textureU->level = 0; // no mipmap
+    textureU->gen = gen++;
+    // TODO: Optimize
+    memcpy(textureU->data(),planeU,textureU->dataSize());
+
+    textureV->level = 0; // no mipmap
+    textureV->gen = gen++;
+    // TODO: Optimize
+    memcpy(textureV->data(),planeV,textureV->dataSize());
+
+    scene.put(flowvr_scene_port,scratch);
+
+    last_nx = nx;
+    last_ny = ny;
+    last_rect = rect;
+
+    last_yv12 = true;
+}
+
+/* ------------------------------------------------------------------------- */
+
+static uint32_t draw_image(mp_image_t *mpi)
+{
+    if (mpi->flags & MP_IMGFLAG_PLANAR) { /* Planar */
+      if (mpi->flags & MP_IMGFLAG_YUV) {
+	flowvr_send_texture_yv12(mpi);
+	return VO_TRUE;
+      } else { /* Planar RGB */
+	return VO_FALSE;
+      }
+    } else { /* Packed */
+        if (mpi->flags & MP_IMGFLAG_YUV) { /* Packed YUV */
+            return VO_FALSE;
+        } else { /* Packed RGB */
+	  
+	  flowvr_send_texture(mpi);
+	  return VO_TRUE;
+        }
+    }
+
+    return VO_FALSE;
+}
+
+/* ------------------------------------------------------------------------- */
+
+static int draw_frame(uint8_t *src[])
+{
+    mp_msg(MSGT_VO, MSGL_V, "%s: draw_frame() is called!\n", info.short_name);
+    return -1;
+}
+
+/* ------------------------------------------------------------------------- */
+
+static int draw_slice(uint8_t *src[], int stride[], int w, int h,
+                           int x, int y)
+{
+    return 0;
+}
+
+/* ------------------------------------------------------------------------- */
+
+static int query_format(uint32_t format)
+{
+    /* Ensure that for PPM we get Packed RGB and for PGM(YUV) we get
+     * Planar YUV */
+    if (format == IMGFMT_RGB24) {
+        return VFCAP_CSP_SUPPORTED|VFCAP_CSP_SUPPORTED_BY_HW;
+    }
+    if (format == IMGFMT_YV12) {
+      return VFCAP_CSP_SUPPORTED|VFCAP_CSP_SUPPORTED_BY_HW;
+    }
+ 
+    return 0;
+}
+
+/* ------------------------------------------------------------------------- */
+
+static int control(uint32_t request, void *data, ...)
+{
+    switch (request) {
+        case VOCTRL_QUERY_FORMAT:
+            return query_format(*((uint32_t*)data));
+        case VOCTRL_DRAW_IMAGE:
+            return draw_image((mp_image_t*)data);
+    }
+    return VO_NOTIMPL;
+}
+
+/* ------------------------------------------------------------------------- */
+
+static void uninit(void)
+{
+}
+
+/* ------------------------------------------------------------------------- */
+
+static void check_events(void)
+{
+}
+
+/* ------------------------------------------------------------------------- */
+
+static void draw_osd(void)
+{
+}
+
+/* ------------------------------------------------------------------------- */
+
+static void flip_page (void)
+{
+}
+
+/* ------------------------------------------------------------------------- */
diff -urN ../MPlayer-1.0rc1/Makefile ./Makefile
--- ../MPlayer-1.0rc1/Makefile	2006-10-23 00:32:31.000000000 +0200
+++ ./Makefile	2007-04-22 15:29:21.000000000 +0200
@@ -75,6 +75,7 @@
           $(DIRECTFB_LIB) \
           $(CACA_LIB) \
 	  $(VESA_LIB) \
+	  $(FLOWVR_LIB) \
 
 ifeq ($(VIDIX),yes)
 VO_LIBS += vidix/libvidix.a
@@ -384,7 +385,7 @@
                $(STATIC_LIB) \
 
 $(PRG):	$(MPLAYER_DEP)
-	$(CC) $(CFLAGS) -o $(PRG) $(OBJS_MPLAYER) $(LIBS_MPLAYER)
+	$(CXX) $(CFLAGS) -o $(PRG) $(OBJS_MPLAYER) $(LIBS_MPLAYER)
 
 ifeq ($(MENCODER),yes)
 LIBS_MENCODER = libmpcodecs/libmpencoders.a \
@@ -392,7 +393,7 @@
                 $(COMMON_LIBS) \
 
 $(PRG_MENCODER): $(MENCODER_DEP)
-	$(CC) $(CFLAGS) -o $(PRG_MENCODER) $(OBJS_MENCODER) $(LIBS_MENCODER)
+	$(CXX) $(CFLAGS) -o $(PRG_MENCODER) $(OBJS_MENCODER) $(LIBS_MENCODER)
 endif
 
 osdep/mplayer-rc.o: osdep/mplayer.rc
diff -urN ../MPlayer-1.0rc1/Makefile.flowvr ./Makefile.flowvr
--- ../MPlayer-1.0rc1/Makefile.flowvr	1970-01-01 01:00:00.000000000 +0100
+++ ./Makefile.flowvr	2007-04-22 15:15:57.000000000 +0200
@@ -0,0 +1,18 @@
+MPLAYER-VERSION := 1.0pre8
+
+all: config.mak
+	$(MAKE)
+
+config.mak:
+	./configure --disable-ivtv --disable-tv-v4l2 --prefix=../../../../modules/mplayer
+	@echo 'CXX = g++' >> config.mak
+	@cat config.flowvr.mak >> config.mak
+
+clean:
+	$(MAKE) clean
+
+distclean:
+	$(MAKE) distclean
+
+install:
+	$(MAKE) install
\ Pas de fin de ligne à la fin du fichier.
