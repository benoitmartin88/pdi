#!/bin/bash

# Adds to $cmd the options to propagate the value of a variable (does nothing if the variable is not set or null)
function cmdpropenv() {
  local ret=$(eval echo \${$1});
  local prep="\${$1:+\"-e $1 \\\"$ret\\\"\"}"
  local pap=`eval echo $prep`
  cmd="$cmd $pap"
}

# Adds to $cmd the options to set a variable (and exports it locally in case...)
function cmdsetenv() {
  export $1="$2";
  cmd="$cmd -e $1 \"$2\"";
}


finish=0
parallel=0
path=""
cmd=""
login=""
verbose=0
exec=0
multiplatform=1
log=0
background=0
grid=0
jobkey=""
ssh_opt=""
pin=0

while [[ $finish != 1 ]]; do
  if [[ $1 == "-h" ]] ||  [[ $1 == "--help" ]]  ||  [[ $1 == "-help" ]]; then
    echo "Usage: flowvr-run-ssh [-v] [--path path] [-l login] [-e VAR VALUE] [-x VAR] [-s] [-p] [-m] [-b] hostlist command"
    echo "  -v           	: verbose"
    echo "  --path path  	: changes to path before executing the command."
    echo "  -d path      	: (DEPRECATED) changes to path before executing the command."
    echo "  -e VAR VALUE 	: sets the variable VAR to VALUE in the environment of the command."
    echo "  -x VAR       	: propagates the variable VAR in the environment of the command."
    echo "  -p           	: sets FLOWVR_RANK and FLOWVR_NBPROC and allows multiple hosts in hostlist (parallel mode)."
    echo "  -l login     	: specifies the user to log in as on the remote machine."
    echo "  -m           	: disable FLOWVR_PLATFORM substitution in path."
    echo "  -b           	: run in background."
    echo "  -g keyfile  	: Connect to a job with the jobkey using oar."
    echo "  -X  	        : Enables X11 forwarding and trusted X11 forwarding."
    echo "  -c corelist         : Pin each process on a specific core"
    exit 0;
  elif [[ $1 == "-v" ]]; then
    verbose=1
    cmd="$cmd -v"
    shift 1
  elif [[ $1 == "-d" ]]; then
      echo "WARNING: This option -d is deprecated. Please use --path instead of"
      if [[ ${2:0:1} == "/" ]]; then
        path=$2
      else
        path=$PWD/$2
      fi
    shift 2
  elif [[ $1 == "--path" ]]; then
    if [[ ${2:0:1} == "/" ]]; then
      path=$2
    else
      path=$PWD/$2
    fi
    shift 2
  elif [[ $1 == "-g" ]]; then
    grid=1
    jobkey=$2
    shift 2
  elif [[ $1 == "-p" ]]; then
    parallel=1
    shift 1
  elif [[ $1 == "-x" ]]; then
    cmdpropenv "$2";
    shift 2
  elif [[ $1 == "-e" ]]; then
    cmdsetenv $2 "$3"
    shift 3
  elif [[ $1 == "-l" ]]; then
    login="$2"
    shift 2
  elif [[ $1 == "-L" ]]; then
    log=1
    shift 1
  elif [[ $1 == "-m" ]]; then
    multiplatform=0
    shift 1
  elif [[ $1 == "-E" ]]; then
    exec=1
    shift 1
  elif [[ $1 == "-b" ]]; then
    background=1
    shift 1
  elif [[ $1 == "-X" ]]; then
    ssh_opt="-XY"
    shift 1
  elif [[ $1 == "-c" ]]; then
    pin=1
    command -v read >/dev/null 2>&1 || { echo >&2 "read is required to support core pinning but is not found. Process pinning is disabled."; pin=0; }
    IFS=' ' read -ra cores <<< "$2"
    command -v taskset >/dev/null 2>&1 || { echo >&2 "Taskset is required to support core pinning but is not found. Process pinning is disabled."; pin=0; }
    shift 2
  else
    finish=1
  fi
done

if [[ $multiplatform == 1 && -n "$FLOWVR_PLATFORM" ]]; then
  path=`echo $path | sed "s+$FLOWVR_PLATFORM+_FLOWVR_PLATFORM_+g"`
fi


#if [[ $exec == 1 ]]; then
# cmd="$cmd -E"
#fi

if [[ $log != 0 ]]; then
  cmd="$cmd -L $path/log"
fi

cmdpropenv "FLOWVR_PARENT"
cmdpropenv "FLOWVR_DAEMON"
cmdpropenv "FLOWVR_MODNAME"

hosts=$1
shift 1

nbproc=0
for h in $hosts; do
  let nbproc+=1;
done

if [[ $parallel == 0 ]]; then
  if [[ $nbproc > 1 ]]; then
      echo "ERROR (flowvr-run-ssh):  Single target host expected. Hostlist has $nbproc targets ($hosts).  Use the -p option for parallel lauching"
      exit 0;
  fi
fi

nbcores=0
if [[ $pin == 1 ]]; then
  for c in "${cores[@]}"; do
    let nbcores+=1;
  done
  if [[ $nbcores != $nbproc ]]; then
    echo "ERROR (flowvr-run-ssh): The number of cores does not map the number of process. Hosts : $nbproc , cores : $nbcores."
    exit 0;
  fi
fi

if [[ $parallel != 0 ]]; then
  cmdsetenv "FLOWVR_NBPROC" $nbproc
fi

rank=0

for h in $hosts; do
  cmdfinal="$cmd";
  if [[ $parallel != 0 ]]; then
    export FLOWVR_RANK=$rank
    cmdfinal="$cmdfinal -e FLOWVR_RANK $rank"
  fi
  if [[ $verbose == 1 ]]; then
#    echo Command params: "$cmdfinal"
    cmdfinal="$cmdfinal -v"
  fi
  if [[ $path == "" ]]; then
  	gotopath="--path $PWD"
  else
  	gotopath="--path $path"
  fi
  launchCmd=""
  if [[ $pin == 1 ]]; then
    launchCmd="taskset -c ${cores[$rank]} $@"
  else
    launchCmd="$@"
  fi
  if [[ $h == "localhost" ]]; then
      if [[ $verbose == 1 ]]; then
          echo  Run on localhost: eval exec flowvr-run-env -E $gotopath $cmdfinal "$launchCmd" '&'
      fi
      eval exec flowvr-run-env -E $gotopath $cmdfinal "$launchCmd" &
  elif [[ $grid != 0 ]]; then
      if [[ $verbose == 1 ]]; then
          echo  Run: exec ${FLOWVR_SSH:-ssh} -l oar -i $jobkey ${login:+$login@}$h /bin/bash -l -c \'flowvr-run-env -E $cmdfinal $gotopath "$launchCmd"\' '&' 
      fi
      exec ${FLOWVR_SSH:-ssh} -l oar -i $jobkey ${login:+$login@}$h /bin/bash -l -c \'flowvr-run-env -E $cmdfinal $gotopath "$launchCmd"\' &
  else
      if [[ $verbose == 1 ]]; then
          echo  Run: exec ${FLOWVR_SSH:-ssh} $ssh_opt ${login:+$login@}$h /bin/bash -l -c \'flowvr-run-env -E $cmdfinal $gotopath "$launchCmd"\' '&'
      fi
      exec ${FLOWVR_SSH:-ssh} $ssh_opt ${login:+$login@}$h /bin/bash -l -c \'flowvr-run-env -E $cmdfinal $gotopath "$launchCmd"\' &
  fi
  let rank+=1
done

if [[ $background == 0 ]]; then
  wait
fi
