# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cflowvr', [dirname(__file__)])
        except ImportError:
            import _cflowvr
            return _cflowvr
        if fp is not None:
            try:
                _mod = imp.load_module('_cflowvr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cflowvr = swig_import_helper()
    del swig_import_helper
else:
    import _cflowvr
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cflowvr.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cflowvr.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cflowvr.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cflowvr.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cflowvr.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cflowvr.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cflowvr.SwigPyIterator_copy(self)

    def next(self):
        return _cflowvr.SwigPyIterator_next(self)

    def __next__(self):
        return _cflowvr.SwigPyIterator___next__(self)

    def previous(self):
        return _cflowvr.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cflowvr.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cflowvr.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cflowvr.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cflowvr.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cflowvr.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cflowvr.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cflowvr.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cflowvr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Parallel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parallel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parallel, name)
    __repr__ = _swig_repr
    __swig_getmethods__["init"] = lambda x: _cflowvr.Parallel_init
    if _newclass:
        init = staticmethod(_cflowvr.Parallel_init)
    __swig_getmethods__["close"] = lambda x: _cflowvr.Parallel_close
    if _newclass:
        close = staticmethod(_cflowvr.Parallel_close)
    __swig_getmethods__["isInitialized"] = lambda x: _cflowvr.Parallel_isInitialized
    if _newclass:
        isInitialized = staticmethod(_cflowvr.Parallel_isInitialized)
    __swig_getmethods__["isParallel"] = lambda x: _cflowvr.Parallel_isParallel
    if _newclass:
        isParallel = staticmethod(_cflowvr.Parallel_isParallel)
    __swig_getmethods__["getRank"] = lambda x: _cflowvr.Parallel_getRank
    if _newclass:
        getRank = staticmethod(_cflowvr.Parallel_getRank)
    __swig_getmethods__["getNbProc"] = lambda x: _cflowvr.Parallel_getNbProc
    if _newclass:
        getNbProc = staticmethod(_cflowvr.Parallel_getNbProc)

    def __init__(self):
        this = _cflowvr.new_Parallel()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cflowvr.delete_Parallel
    __del__ = lambda self: None
Parallel_swigregister = _cflowvr.Parallel_swigregister
Parallel_swigregister(Parallel)
cvar = _cflowvr.cvar

def Parallel_init(*args):
    return _cflowvr.Parallel_init(*args)
Parallel_init = _cflowvr.Parallel_init

def Parallel_close():
    return _cflowvr.Parallel_close()
Parallel_close = _cflowvr.Parallel_close

def Parallel_isInitialized():
    return _cflowvr.Parallel_isInitialized()
Parallel_isInitialized = _cflowvr.Parallel_isInitialized

def Parallel_isParallel():
    return _cflowvr.Parallel_isParallel()
Parallel_isParallel = _cflowvr.Parallel_isParallel

def Parallel_getRank():
    return _cflowvr.Parallel_getRank()
Parallel_getRank = _cflowvr.Parallel_getRank

def Parallel_getNbProc():
    return _cflowvr.Parallel_getNbProc()
Parallel_getNbProc = _cflowvr.Parallel_getNbProc

class Buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cflowvr.delete_Buffer
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _cflowvr.new_Buffer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, b):
        return _cflowvr.Buffer___eq__(self, b)

    def __ne__(self, b):
        return _cflowvr.Buffer___ne__(self, b)

    def getSize(self, segmentIndex=0):
        return _cflowvr.Buffer_getSize(self, segmentIndex)

    def empty(self):
        return _cflowvr.Buffer_empty(self)

    def valid(self):
        return _cflowvr.Buffer_valid(self)

    def unique(self, segmentIndex=0):
        return _cflowvr.Buffer_unique(self, segmentIndex)

    def readAccess(self, segment=0):
        return _cflowvr.Buffer_readAccess(self, segment)

    def getAllocator(self, segment=0):
        return _cflowvr.Buffer_getAllocator(self, segment)

    def getImp(self, segment=0):
        return _cflowvr.Buffer_getImp(self, segment)

    def getOffset(self, segment=0):
        return _cflowvr.Buffer_getOffset(self, segment)

    def clear(self):
        return _cflowvr.Buffer_clear(self)

    def __add__(self, other):
        return _cflowvr.Buffer___add__(self, other)

    def __sub__(self, other):
        return _cflowvr.Buffer___sub__(self, other)

    def __iadd__(self, other):
        return _cflowvr.Buffer___iadd__(self, other)

    def __isub__(self, other):
        return _cflowvr.Buffer___isub__(self, other)

    def getNumberOfSegments(self):
        return _cflowvr.Buffer_getNumberOfSegments(self)

    def getIsSegmented(self):
        return _cflowvr.Buffer_getIsSegmented(self)

    def getSegmentSize(self, segmentIndex):
        return _cflowvr.Buffer_getSegmentSize(self, segmentIndex)

    def equals(self, other):
        return _cflowvr.Buffer_equals(self, other)

    def linearize(self):
        return _cflowvr.Buffer_linearize(self)

    def copyTo(self, dest):
        return _cflowvr.Buffer_copyTo(self, dest)

    def asString(self):
        return _cflowvr.Buffer_asString(self)
Buffer_swigregister = _cflowvr.Buffer_swigregister
Buffer_swigregister(Buffer)
Buffer.ALLSEGMENTS = _cflowvr.cvar.Buffer_ALLSEGMENTS
Buffer.INVALIDSEGMENTSIZE = _cflowvr.cvar.Buffer_INVALIDSEGMENTSIZE
Buffer.CLAIMALLSIZE = _cflowvr.cvar.Buffer_CLAIMALLSIZE

class BufferWrite(Buffer):
    __swig_setmethods__ = {}
    for _s in [Buffer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferWrite, name, value)
    __swig_getmethods__ = {}
    for _s in [Buffer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferWrite, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cflowvr.new_BufferWrite(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reserve(self, requestedMinSize, expandOnly=False, amortized=False, segment=0):
        return _cflowvr.BufferWrite_reserve(self, requestedMinSize, expandOnly, amortized, segment)

    def resize(self, newSize, amortized=False, segment=0):
        return _cflowvr.BufferWrite_resize(self, newSize, amortized, segment)

    def expand(self, newSize, amortized=False, segment=0):
        return _cflowvr.BufferWrite_expand(self, newSize, amortized, segment)

    def linearize(self):
        return _cflowvr.BufferWrite_linearize(self)

    def writeAccess(self, segment=0):
        return _cflowvr.BufferWrite_writeAccess(self, segment)

    def __add__(self, other):
        return _cflowvr.BufferWrite___add__(self, other)

    def __sub__(self, other):
        return _cflowvr.BufferWrite___sub__(self, other)

    def __iadd__(self, other):
        return _cflowvr.BufferWrite___iadd__(self, other)

    def __isub__(self, other):
        return _cflowvr.BufferWrite___isub__(self, other)
    __swig_destroy__ = _cflowvr.delete_BufferWrite
    __del__ = lambda self: None
BufferWrite_swigregister = _cflowvr.BufferWrite_swigregister
BufferWrite_swigregister(BufferWrite)

class BufferPool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferPool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferPool, name)
    __repr__ = _swig_repr

    def __init__(self, maxbuffers=10):
        this = _cflowvr.new_BufferPool(maxbuffers)
        try:
            self.this.append(this)
        except:
            self.this = this

    def alloc(self, allocator, size, strict=False):
        return _cflowvr.BufferPool_alloc(self, allocator, size, strict)

    def getCurrentBufferSize(self):
        return _cflowvr.BufferPool_getCurrentBufferSize(self)

    def getPoolSize(self):
        return _cflowvr.BufferPool_getPoolSize(self)

    def getMaxBuffer(self):
        return _cflowvr.BufferPool_getMaxBuffer(self)

    def setMaxBuffer(self, maxb):
        return _cflowvr.BufferPool_setMaxBuffer(self, maxb)

    def getNbRequests(self):
        return _cflowvr.BufferPool_getNbRequests(self)

    def getNbAllocs(self):
        return _cflowvr.BufferPool_getNbAllocs(self)
    __swig_destroy__ = _cflowvr.delete_BufferPool
    __del__ = lambda self: None
BufferPool_swigregister = _cflowvr.BufferPool_swigregister
BufferPool_swigregister(BufferPool)

class BufferPoolAllocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferPoolAllocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferPoolAllocator, name)
    __repr__ = _swig_repr

    def __init__(self, allocator, maxbuffers=10):
        this = _cflowvr.new_BufferPoolAllocator(allocator, maxbuffers)
        try:
            self.this.append(this)
        except:
            self.this = this

    def alloc(self, size):
        return _cflowvr.BufferPoolAllocator_alloc(self, size)

    def realloc(self, b, size, amortized=False):
        return _cflowvr.BufferPoolAllocator_realloc(self, b, size, amortized)
    __swig_destroy__ = _cflowvr.delete_BufferPoolAllocator
    __del__ = lambda self: None
BufferPoolAllocator_swigregister = _cflowvr.BufferPoolAllocator_swigregister
BufferPoolAllocator_swigregister(BufferPoolAllocator)

class BaseType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseType, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def xmlDesc(self):
        return _cflowvr.BaseType_xmlDesc(self)
    __swig_getmethods__["create"] = lambda x: _cflowvr.BaseType_create
    if _newclass:
        create = staticmethod(_cflowvr.BaseType_create)

    def clone(self):
        return _cflowvr.BaseType_clone(self)

    def remove(self):
        return _cflowvr.BaseType_remove(self)

    def size(self):
        return _cflowvr.BaseType_size(self)

    def array(self, index, offset):
        return _cflowvr.BaseType_array(self, index, offset)

    def read(self, *args):
        return _cflowvr.BaseType_read(self, *args)

    def write(self, *args):
        return _cflowvr.BaseType_write(self, *args)

    def typeName(self):
        return _cflowvr.BaseType_typeName(self)

    def toTypeArray(self):
        return _cflowvr.BaseType_toTypeArray(self)

    def toTypeBinary(self):
        return _cflowvr.BaseType_toTypeBinary(self)
BaseType_swigregister = _cflowvr.BaseType_swigregister
BaseType_swigregister(BaseType)

def BaseType_create(spec):
    return _cflowvr.BaseType_create(spec)
BaseType_create = _cflowvr.BaseType_create

class TypeInt(BaseType):
    __swig_setmethods__ = {}
    for _s in [BaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeInt, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeInt, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _cflowvr.TypeInt_create
    if _newclass:
        create = staticmethod(_cflowvr.TypeInt_create)

    def clone(self):
        return _cflowvr.TypeInt_clone(self)

    def remove(self):
        return _cflowvr.TypeInt_remove(self)
    __swig_setmethods__["xmlName"] = _cflowvr.TypeInt_xmlName_set
    __swig_getmethods__["xmlName"] = _cflowvr.TypeInt_xmlName_get
    if _newclass:
        xmlName = _swig_property(_cflowvr.TypeInt_xmlName_get, _cflowvr.TypeInt_xmlName_set)

    def xmlDesc(self):
        return _cflowvr.TypeInt_xmlDesc(self)

    def size(self):
        return _cflowvr.TypeInt_size(self)

    def read(self, *args):
        return _cflowvr.TypeInt_read(self, *args)

    def array(self, arg2, arg3):
        return _cflowvr.TypeInt_array(self, arg2, arg3)

    def write(self, *args):
        return _cflowvr.TypeInt_write(self, *args)

    def __init__(self):
        this = _cflowvr.new_TypeInt()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cflowvr.delete_TypeInt
    __del__ = lambda self: None
TypeInt_swigregister = _cflowvr.TypeInt_swigregister
TypeInt_swigregister(TypeInt)

def TypeInt_create():
    return _cflowvr.TypeInt_create()
TypeInt_create = _cflowvr.TypeInt_create

class TypeFloat(BaseType):
    __swig_setmethods__ = {}
    for _s in [BaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeFloat, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _cflowvr.TypeFloat_create
    if _newclass:
        create = staticmethod(_cflowvr.TypeFloat_create)

    def clone(self):
        return _cflowvr.TypeFloat_clone(self)

    def remove(self):
        return _cflowvr.TypeFloat_remove(self)
    __swig_setmethods__["xmlName"] = _cflowvr.TypeFloat_xmlName_set
    __swig_getmethods__["xmlName"] = _cflowvr.TypeFloat_xmlName_get
    if _newclass:
        xmlName = _swig_property(_cflowvr.TypeFloat_xmlName_get, _cflowvr.TypeFloat_xmlName_set)

    def xmlDesc(self):
        return _cflowvr.TypeFloat_xmlDesc(self)

    def size(self):
        return _cflowvr.TypeFloat_size(self)

    def read(self, *args):
        return _cflowvr.TypeFloat_read(self, *args)

    def array(self, arg2, arg3):
        return _cflowvr.TypeFloat_array(self, arg2, arg3)

    def write(self, *args):
        return _cflowvr.TypeFloat_write(self, *args)

    def __init__(self):
        this = _cflowvr.new_TypeFloat()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cflowvr.delete_TypeFloat
    __del__ = lambda self: None
TypeFloat_swigregister = _cflowvr.TypeFloat_swigregister
TypeFloat_swigregister(TypeFloat)

def TypeFloat_create():
    return _cflowvr.TypeFloat_create()
TypeFloat_create = _cflowvr.TypeFloat_create

class TypeString(BaseType):
    __swig_setmethods__ = {}
    for _s in [BaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeString, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeString, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _cflowvr.TypeString_create
    if _newclass:
        create = staticmethod(_cflowvr.TypeString_create)

    def clone(self):
        return _cflowvr.TypeString_clone(self)

    def remove(self):
        return _cflowvr.TypeString_remove(self)
    __swig_setmethods__["xmlName"] = _cflowvr.TypeString_xmlName_set
    __swig_getmethods__["xmlName"] = _cflowvr.TypeString_xmlName_get
    if _newclass:
        xmlName = _swig_property(_cflowvr.TypeString_xmlName_get, _cflowvr.TypeString_xmlName_set)

    def xmlDesc(self):
        return _cflowvr.TypeString_xmlDesc(self)

    def size(self):
        return _cflowvr.TypeString_size(self)

    def read(self, *args):
        return _cflowvr.TypeString_read(self, *args)

    def array(self, arg2, arg3):
        return _cflowvr.TypeString_array(self, arg2, arg3)

    def write(self, *args):
        return _cflowvr.TypeString_write(self, *args)

    def __init__(self):
        this = _cflowvr.new_TypeString()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cflowvr.delete_TypeString
    __del__ = lambda self: None
TypeString_swigregister = _cflowvr.TypeString_swigregister
TypeString_swigregister(TypeString)

def TypeString_create():
    return _cflowvr.TypeString_create()
TypeString_create = _cflowvr.TypeString_create

class TypeArray(BaseType):
    __swig_setmethods__ = {}
    for _s in [BaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeArray, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeArray, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _cflowvr.TypeArray_create
    if _newclass:
        create = staticmethod(_cflowvr.TypeArray_create)

    def clone(self):
        return _cflowvr.TypeArray_clone(self)

    def remove(self):
        return _cflowvr.TypeArray_remove(self)
    __swig_setmethods__["xmlName"] = _cflowvr.TypeArray_xmlName_set
    __swig_getmethods__["xmlName"] = _cflowvr.TypeArray_xmlName_get
    if _newclass:
        xmlName = _swig_property(_cflowvr.TypeArray_xmlName_get, _cflowvr.TypeArray_xmlName_set)

    def xmlDesc(self):
        return _cflowvr.TypeArray_xmlDesc(self)

    def size(self):
        return _cflowvr.TypeArray_size(self)

    def read(self, *args):
        return _cflowvr.TypeArray_read(self, *args)

    def array(self, index, offset):
        return _cflowvr.TypeArray_array(self, index, offset)

    def write(self, *args):
        return _cflowvr.TypeArray_write(self, *args)
    __swig_getmethods__["n"] = _cflowvr.TypeArray_n_get
    if _newclass:
        n = _swig_property(_cflowvr.TypeArray_n_get)
    __swig_setmethods__["t"] = _cflowvr.TypeArray_t_set
    __swig_getmethods__["t"] = _cflowvr.TypeArray_t_get
    if _newclass:
        t = _swig_property(_cflowvr.TypeArray_t_get, _cflowvr.TypeArray_t_set)
    __swig_destroy__ = _cflowvr.delete_TypeArray
    __del__ = lambda self: None
TypeArray_swigregister = _cflowvr.TypeArray_swigregister
TypeArray_swigregister(TypeArray)

def TypeArray_create(_n, _t):
    return _cflowvr.TypeArray_create(_n, _t)
TypeArray_create = _cflowvr.TypeArray_create

class TypeBinary(BaseType):
    __swig_setmethods__ = {}
    for _s in [BaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeBinary, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeBinary, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _cflowvr.TypeBinary_create
    if _newclass:
        create = staticmethod(_cflowvr.TypeBinary_create)

    def clone(self):
        return _cflowvr.TypeBinary_clone(self)

    def remove(self):
        return _cflowvr.TypeBinary_remove(self)
    __swig_setmethods__["xmlName"] = _cflowvr.TypeBinary_xmlName_set
    __swig_getmethods__["xmlName"] = _cflowvr.TypeBinary_xmlName_get
    if _newclass:
        xmlName = _swig_property(_cflowvr.TypeBinary_xmlName_get, _cflowvr.TypeBinary_xmlName_set)

    def xmlDesc(self):
        return _cflowvr.TypeBinary_xmlDesc(self)

    def size(self):
        return _cflowvr.TypeBinary_size(self)

    def read(self, *args):
        return _cflowvr.TypeBinary_read(self, *args)

    def array(self, arg2, arg3):
        return _cflowvr.TypeBinary_array(self, arg2, arg3)

    def write(self, *args):
        return _cflowvr.TypeBinary_write(self, *args)
    __swig_getmethods__["bsize"] = _cflowvr.TypeBinary_bsize_get
    if _newclass:
        bsize = _swig_property(_cflowvr.TypeBinary_bsize_get)
    __swig_destroy__ = _cflowvr.delete_TypeBinary
    __del__ = lambda self: None
TypeBinary_swigregister = _cflowvr.TypeBinary_swigregister
TypeBinary_swigregister(TypeBinary)

def TypeBinary_create(_size):
    return _cflowvr.TypeBinary_create(_size)
TypeBinary_create = _cflowvr.TypeBinary_create

class StampInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StampInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StampInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cflowvr.new_StampInfo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cflowvr.delete_StampInfo
    __del__ = lambda self: None

    def getName(self):
        return _cflowvr.StampInfo_getName(self)

    def setName(self, n):
        return _cflowvr.StampInfo_setName(self, n)

    def getSize(self):
        return _cflowvr.StampInfo_getSize(self)

    def getOffset(self):
        return _cflowvr.StampInfo_getOffset(self)

    def getType(self):
        return _cflowvr.StampInfo_getType(self)

    def isDynamic(self):
        return _cflowvr.StampInfo_isDynamic(self)

    def valid(self, *args):
        return _cflowvr.StampInfo_valid(self, *args)
StampInfo_swigregister = _cflowvr.StampInfo_swigregister
StampInfo_swigregister(StampInfo)

class StampList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StampList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StampList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cflowvr.new_StampList()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cflowvr.delete_StampList
    __del__ = lambda self: None

    def add(self, stamp):
        return _cflowvr.StampList_add(self, stamp)

    def minSize(self):
        return _cflowvr.StampList_minSize(self)

    def clone(self):
        return _cflowvr.StampList_clone(self)
    __swig_setmethods__["source"] = _cflowvr.StampList_source_set
    __swig_getmethods__["source"] = _cflowvr.StampList_source_get
    if _newclass:
        source = _swig_property(_cflowvr.StampList_source_get, _cflowvr.StampList_source_set)
    __swig_setmethods__["num"] = _cflowvr.StampList_num_set
    __swig_getmethods__["num"] = _cflowvr.StampList_num_get
    if _newclass:
        num = _swig_property(_cflowvr.StampList_num_get, _cflowvr.StampList_num_set)
    __swig_setmethods__["it"] = _cflowvr.StampList_it_set
    __swig_getmethods__["it"] = _cflowvr.StampList_it_get
    if _newclass:
        it = _swig_property(_cflowvr.StampList_it_get, _cflowvr.StampList_it_set)
    SYS_FLG_NONE = _cflowvr.StampList_SYS_FLG_NONE
    SYS_FLG_SCRATCH = _cflowvr.StampList_SYS_FLG_SCRATCH
    SYS_FLG_KEEPSEGMENTS = _cflowvr.StampList_SYS_FLG_KEEPSEGMENTS
    __swig_setmethods__["sysflags"] = _cflowvr.StampList_sysflags_set
    __swig_getmethods__["sysflags"] = _cflowvr.StampList_sysflags_get
    if _newclass:
        sysflags = _swig_property(_cflowvr.StampList_sysflags_get, _cflowvr.StampList_sysflags_set)
    __swig_setmethods__["sysdata"] = _cflowvr.StampList_sysdata_set
    __swig_getmethods__["sysdata"] = _cflowvr.StampList_sysdata_get
    if _newclass:
        sysdata = _swig_property(_cflowvr.StampList_sysdata_get, _cflowvr.StampList_sysdata_set)
    __swig_setmethods__["userflags"] = _cflowvr.StampList_userflags_set
    __swig_getmethods__["userflags"] = _cflowvr.StampList_userflags_get
    if _newclass:
        userflags = _swig_property(_cflowvr.StampList_userflags_get, _cflowvr.StampList_userflags_set)

    def nbStamp(self):
        return _cflowvr.StampList_nbStamp(self)

    def generateXML(self):
        return _cflowvr.StampList_generateXML(self)

    def updateFromXML(self, xml):
        return _cflowvr.StampList_updateFromXML(self, xml)

    def __getitem__(self, *args):
        return _cflowvr.StampList___getitem__(self, *args)
StampList_swigregister = _cflowvr.StampList_swigregister
StampList_swigregister(StampList)

class StampListControl(StampList):
    __swig_setmethods__ = {}
    for _s in [StampList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StampListControl, name, value)
    __swig_getmethods__ = {}
    for _s in [StampList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StampListControl, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cflowvr.new_StampListControl()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["dest"] = _cflowvr.StampListControl_dest_set
    __swig_getmethods__["dest"] = _cflowvr.StampListControl_dest_get
    if _newclass:
        dest = _swig_property(_cflowvr.StampListControl_dest_get, _cflowvr.StampListControl_dest_set)
    __swig_setmethods__["reply"] = _cflowvr.StampListControl_reply_set
    __swig_getmethods__["reply"] = _cflowvr.StampListControl_reply_get
    if _newclass:
        reply = _swig_property(_cflowvr.StampListControl_reply_get, _cflowvr.StampListControl_reply_set)
    __swig_destroy__ = _cflowvr.delete_StampListControl
    __del__ = lambda self: None
StampListControl_swigregister = _cflowvr.StampListControl_swigregister
StampListControl_swigregister(StampListControl)

class StampListSpecification(StampList):
    __swig_setmethods__ = {}
    for _s in [StampList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StampListSpecification, name, value)
    __swig_getmethods__ = {}
    for _s in [StampList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StampListSpecification, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cflowvr.new_StampListSpecification()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["spec"] = _cflowvr.StampListSpecification_spec_set
    __swig_getmethods__["spec"] = _cflowvr.StampListSpecification_spec_get
    if _newclass:
        spec = _swig_property(_cflowvr.StampListSpecification_spec_get, _cflowvr.StampListSpecification_spec_set)
    __swig_destroy__ = _cflowvr.delete_StampListSpecification
    __del__ = lambda self: None
StampListSpecification_swigregister = _cflowvr.StampListSpecification_swigregister
StampListSpecification_swigregister(StampListSpecification)

class Stamps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stamps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stamps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cflowvr.new_Stamps(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valid(self):
        return _cflowvr.Stamps_valid(self)

    def empty(self):
        return _cflowvr.Stamps_empty(self)

    def getSize(self):
        return _cflowvr.Stamps_getSize(self)

    def readAccess(self):
        return _cflowvr.Stamps_readAccess(self)

    def clear(self):
        return _cflowvr.Stamps_clear(self)

    def getAllocator(self):
        return _cflowvr.Stamps_getAllocator(self)

    def __eq__(self, other):
        return _cflowvr.Stamps___eq__(self, other)

    def getStampsSize(self):
        return _cflowvr.Stamps_getStampsSize(self)

    def isValid(self, stamp):
        return _cflowvr.Stamps_isValid(self, stamp)

    def read(self, *args):
        return _cflowvr.Stamps_read(self, *args)

    def asString(self):
        return _cflowvr.Stamps_asString(self)
    __swig_destroy__ = _cflowvr.delete_Stamps
    __del__ = lambda self: None
Stamps_swigregister = _cflowvr.Stamps_swigregister
Stamps_swigregister(Stamps)

class StampsWrite(BufferWrite):
    __swig_setmethods__ = {}
    for _s in [BufferWrite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StampsWrite, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferWrite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StampsWrite, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cflowvr.new_StampsWrite(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getStampsSize(self):
        return _cflowvr.StampsWrite_getStampsSize(self)

    def clone(self, stamps, stlist):
        return _cflowvr.StampsWrite_clone(self, stamps, stlist)

    def isValid(self, stamp):
        return _cflowvr.StampsWrite_isValid(self, stamp)

    def read(self, *args):
        return _cflowvr.StampsWrite_read(self, *args)

    def write(self, *args):
        return _cflowvr.StampsWrite_write(self, *args)

    def write1(self, *args):
        return _cflowvr.StampsWrite_write1(self, *args)

    def writeArray(self, *args):
        return _cflowvr.StampsWrite_writeArray(self, *args)
    __swig_destroy__ = _cflowvr.delete_StampsWrite
    __del__ = lambda self: None
StampsWrite_swigregister = _cflowvr.StampsWrite_swigregister
StampsWrite_swigregister(StampsWrite)

class MessageWrite(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageWrite, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageWrite, name)
    __repr__ = _swig_repr

    def clear(self):
        return _cflowvr.MessageWrite_clear(self)

    def __eq__(self, m):
        return _cflowvr.MessageWrite___eq__(self, m)

    def __ne__(self, m):
        return _cflowvr.MessageWrite___ne__(self, m)
    __swig_setmethods__["stamps"] = _cflowvr.MessageWrite_stamps_set
    __swig_getmethods__["stamps"] = _cflowvr.MessageWrite_stamps_get
    if _newclass:
        stamps = _swig_property(_cflowvr.MessageWrite_stamps_get, _cflowvr.MessageWrite_stamps_set)
    __swig_setmethods__["data"] = _cflowvr.MessageWrite_data_set
    __swig_getmethods__["data"] = _cflowvr.MessageWrite_data_get
    if _newclass:
        data = _swig_property(_cflowvr.MessageWrite_data_get, _cflowvr.MessageWrite_data_set)

    def __init__(self):
        this = _cflowvr.new_MessageWrite()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _cflowvr.delete_MessageWrite
    __del__ = lambda self: None
MessageWrite_swigregister = _cflowvr.MessageWrite_swigregister
MessageWrite_swigregister(MessageWrite)

class MessagePut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessagePut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessagePut, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cflowvr.new_MessagePut(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def clear(self):
        return _cflowvr.MessagePut_clear(self)

    def __eq__(self, m):
        return _cflowvr.MessagePut___eq__(self, m)

    def __ne__(self, m):
        return _cflowvr.MessagePut___ne__(self, m)
    __swig_setmethods__["stamps"] = _cflowvr.MessagePut_stamps_set
    __swig_getmethods__["stamps"] = _cflowvr.MessagePut_stamps_get
    if _newclass:
        stamps = _swig_property(_cflowvr.MessagePut_stamps_get, _cflowvr.MessagePut_stamps_set)
    __swig_setmethods__["data"] = _cflowvr.MessagePut_data_set
    __swig_getmethods__["data"] = _cflowvr.MessagePut_data_get
    if _newclass:
        data = _swig_property(_cflowvr.MessagePut_data_get, _cflowvr.MessagePut_data_set)
    __swig_destroy__ = _cflowvr.delete_MessagePut
    __del__ = lambda self: None
MessagePut_swigregister = _cflowvr.MessagePut_swigregister
MessagePut_swigregister(MessagePut)

class Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cflowvr.new_Message(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    STAMPS = _cflowvr.Message_STAMPS
    FULL = _cflowvr.Message_FULL
    NBTYPES = _cflowvr.Message_NBTYPES

    def getType(self):
        return _cflowvr.Message_getType(self)

    def valid(self):
        return _cflowvr.Message_valid(self)

    def clear(self):
        return _cflowvr.Message_clear(self)

    def __eq__(self, m):
        return _cflowvr.Message___eq__(self, m)

    def __ne__(self, m):
        return _cflowvr.Message___ne__(self, m)
    __swig_setmethods__["stamps"] = _cflowvr.Message_stamps_set
    __swig_getmethods__["stamps"] = _cflowvr.Message_stamps_get
    if _newclass:
        stamps = _swig_property(_cflowvr.Message_stamps_get, _cflowvr.Message_stamps_set)
    __swig_setmethods__["data"] = _cflowvr.Message_data_set
    __swig_getmethods__["data"] = _cflowvr.Message_data_get
    if _newclass:
        data = _swig_property(_cflowvr.Message_data_get, _cflowvr.Message_data_set)
    __swig_destroy__ = _cflowvr.delete_Message
    __del__ = lambda self: None
Message_swigregister = _cflowvr.Message_swigregister
Message_swigregister(Message)
Message.Null = _cflowvr.cvar.Message_Null

class Port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Port, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cflowvr.delete_Port
    __del__ = lambda self: None

    def isInput(self):
        return _cflowvr.Port_isInput(self)

    def isOutput(self):
        return _cflowvr.Port_isOutput(self)

    def getModule(self):
        return _cflowvr.Port_getModule(self)

    def isConnected(self):
        return _cflowvr.Port_isConnected(self)
    __swig_setmethods__["name"] = _cflowvr.Port_name_set
    __swig_getmethods__["name"] = _cflowvr.Port_name_get
    if _newclass:
        name = _swig_property(_cflowvr.Port_name_get, _cflowvr.Port_name_set)
    __swig_setmethods__["stamps"] = _cflowvr.Port_stamps_set
    __swig_getmethods__["stamps"] = _cflowvr.Port_stamps_get
    if _newclass:
        stamps = _swig_property(_cflowvr.Port_stamps_get, _cflowvr.Port_stamps_set)
Port_swigregister = _cflowvr.Port_swigregister
Port_swigregister(Port)

class InputPort(Port):
    __swig_setmethods__ = {}
    for _s in [Port]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [Port]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputPort, name)
    __repr__ = _swig_repr

    def __init__(self, myname, mystamps=None, bOwnStampList=False, bIsNonBlockingPort=False):
        this = _cflowvr.new_InputPort(myname, mystamps, bOwnStampList, bIsNonBlockingPort)
        try:
            self.this.append(this)
        except:
            self.this = this

    def isInput(self):
        return _cflowvr.InputPort_isInput(self)

    def isOutput(self):
        return _cflowvr.InputPort_isOutput(self)

    def isNonBlockingPort(self):
        return _cflowvr.InputPort_isNonBlockingPort(self)

    def setNonBlockingFlag(self, bBlock):
        return _cflowvr.InputPort_setNonBlockingFlag(self, bBlock)
    __swig_destroy__ = _cflowvr.delete_InputPort
    __del__ = lambda self: None
InputPort_swigregister = _cflowvr.InputPort_swigregister
InputPort_swigregister(InputPort)

class OutputPort(Port):
    __swig_setmethods__ = {}
    for _s in [Port]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputPort, name, value)
    __swig_getmethods__ = {}
    for _s in [Port]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputPort, name)
    __repr__ = _swig_repr

    def __init__(self, myname, mystamps=None, bOwn=False):
        this = _cflowvr.new_OutputPort(myname, mystamps, bOwn)
        try:
            self.this.append(this)
        except:
            self.this = this

    def isInput(self):
        return _cflowvr.OutputPort_isInput(self)

    def isOutput(self):
        return _cflowvr.OutputPort_isOutput(self)
    __swig_destroy__ = _cflowvr.delete_OutputPort
    __del__ = lambda self: None
OutputPort_swigregister = _cflowvr.OutputPort_swigregister
OutputPort_swigregister(OutputPort)


_cflowvr.StatusError_swigconstant(_cflowvr)
StatusError = _cflowvr.StatusError

_cflowvr.StatusInit_swigconstant(_cflowvr)
StatusInit = _cflowvr.StatusInit

_cflowvr.StatusWait_swigconstant(_cflowvr)
StatusWait = _cflowvr.StatusWait

_cflowvr.StatusRun_swigconstant(_cflowvr)
StatusRun = _cflowvr.StatusRun
class ModuleAPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleAPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleAPI, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cflowvr.delete_ModuleAPI
    __del__ = lambda self: None

    def init(self, *args):
        return _cflowvr.ModuleAPI_init(self, *args)

    def abort(self):
        return _cflowvr.ModuleAPI_abort(self)

    def close(self):
        return _cflowvr.ModuleAPI_close(self)

    def wait(self):
        return _cflowvr.ModuleAPI_wait(self)

    def get(self, port, message):
        return _cflowvr.ModuleAPI_get(self, port, message)

    def put(self, *args):
        return _cflowvr.ModuleAPI_put(self, *args)

    def getStatus(self):
        return _cflowvr.ModuleAPI_getStatus(self)

    def getID(self):
        return _cflowvr.ModuleAPI_getID(self)

    def getPortID(self, port):
        return _cflowvr.ModuleAPI_getPortID(self, port)

    def isPortConnected(self, port):
        return _cflowvr.ModuleAPI_isPortConnected(self, port)

    def isBoundByInports(self):
        return _cflowvr.ModuleAPI_isBoundByInports(self)

    def getNumberOfInputPorts(self):
        return _cflowvr.ModuleAPI_getNumberOfInputPorts(self)

    def getNumberOfOutputPorts(self):
        return _cflowvr.ModuleAPI_getNumberOfOutputPorts(self)

    def getPortByName(self, strName):
        return _cflowvr.ModuleAPI_getPortByName(self, strName)

    def getTraceByName(self, strName):
        return _cflowvr.ModuleAPI_getTraceByName(self, strName)

    def alloc(self, size):
        return _cflowvr.ModuleAPI_alloc(self, size)

    def realloc(self, buffer, size, amortized=False):
        return _cflowvr.ModuleAPI_realloc(self, buffer, size, amortized)

    def getAllocator(self):
        return _cflowvr.ModuleAPI_getAllocator(self)

    def getHostName(self):
        return _cflowvr.ModuleAPI_getHostName(self)

    def generateID(self):
        return _cflowvr.ModuleAPI_generateID(self)

    def allocString(self, *args):
        return _cflowvr.ModuleAPI_allocString(self, *args)
ModuleAPI_swigregister = _cflowvr.ModuleAPI_swigregister
ModuleAPI_swigregister(ModuleAPI)


def initModule(*args):
    return _cflowvr.initModule(*args)
initModule = _cflowvr.initModule
class ModuleAPIFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleAPIFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleAPIFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["registerModule"] = lambda x: _cflowvr.ModuleAPIFactory_registerModule
    if _newclass:
        registerModule = staticmethod(_cflowvr.ModuleAPIFactory_registerModule)
    __swig_getmethods__["registerController"] = lambda x: _cflowvr.ModuleAPIFactory_registerController
    if _newclass:
        registerController = staticmethod(_cflowvr.ModuleAPIFactory_registerController)
    __swig_destroy__ = _cflowvr.delete_ModuleAPIFactory
    __del__ = lambda self: None
ModuleAPIFactory_swigregister = _cflowvr.ModuleAPIFactory_swigregister
ModuleAPIFactory_swigregister(ModuleAPIFactory)

def ModuleAPIFactory_registerModule(*args):
    return _cflowvr.ModuleAPIFactory_registerModule(*args)
ModuleAPIFactory_registerModule = _cflowvr.ModuleAPIFactory_registerModule

def ModuleAPIFactory_registerController(*args):
    return _cflowvr.ModuleAPIFactory_registerController(*args)
ModuleAPIFactory_registerController = _cflowvr.ModuleAPIFactory_registerController

class vectorPort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorPort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorPort, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cflowvr.vectorPort_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cflowvr.vectorPort___nonzero__(self)

    def __bool__(self):
        return _cflowvr.vectorPort___bool__(self)

    def __len__(self):
        return _cflowvr.vectorPort___len__(self)

    def pop(self):
        return _cflowvr.vectorPort_pop(self)

    def __getslice__(self, i, j):
        return _cflowvr.vectorPort___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cflowvr.vectorPort___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cflowvr.vectorPort___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cflowvr.vectorPort___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cflowvr.vectorPort___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cflowvr.vectorPort___setitem__(self, *args)

    def append(self, x):
        return _cflowvr.vectorPort_append(self, x)

    def empty(self):
        return _cflowvr.vectorPort_empty(self)

    def size(self):
        return _cflowvr.vectorPort_size(self)

    def clear(self):
        return _cflowvr.vectorPort_clear(self)

    def swap(self, v):
        return _cflowvr.vectorPort_swap(self, v)

    def get_allocator(self):
        return _cflowvr.vectorPort_get_allocator(self)

    def begin(self):
        return _cflowvr.vectorPort_begin(self)

    def end(self):
        return _cflowvr.vectorPort_end(self)

    def rbegin(self):
        return _cflowvr.vectorPort_rbegin(self)

    def rend(self):
        return _cflowvr.vectorPort_rend(self)

    def pop_back(self):
        return _cflowvr.vectorPort_pop_back(self)

    def erase(self, *args):
        return _cflowvr.vectorPort_erase(self, *args)

    def __init__(self, *args):
        this = _cflowvr.new_vectorPort(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _cflowvr.vectorPort_push_back(self, x)

    def front(self):
        return _cflowvr.vectorPort_front(self)

    def back(self):
        return _cflowvr.vectorPort_back(self)

    def assign(self, n, x):
        return _cflowvr.vectorPort_assign(self, n, x)

    def resize(self, *args):
        return _cflowvr.vectorPort_resize(self, *args)

    def insert(self, *args):
        return _cflowvr.vectorPort_insert(self, *args)

    def reserve(self, n):
        return _cflowvr.vectorPort_reserve(self, n)

    def capacity(self):
        return _cflowvr.vectorPort_capacity(self)
    __swig_destroy__ = _cflowvr.delete_vectorPort
    __del__ = lambda self: None
vectorPort_swigregister = _cflowvr.vectorPort_swigregister
vectorPort_swigregister(vectorPort)

# This file is compatible with both classic and new-style classes.


