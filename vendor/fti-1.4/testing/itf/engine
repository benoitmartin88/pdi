#!/bin/bash

# Include all ITF variables
source '@itf_dir@/variables'

# Include all ITF Fixture-public functions
source '@itf_dir@/api'

# -------------------------- Test Runner Internals ----------------------------

itf_load_fixture() {
    # Loads the function definitions in a fixture to the current context
    #
    # Parameters:
    # $1: The fixture name without the .fixture extension

    itf_loaded_fixture="$(basename "$1")"
    itf_fixture_had_errors='false'
    source "$1"
    if [ $? -ne 0 ]; then
      fail 'Fixture file not found'
    fi
    itf_clear_logs
}

itf_unload_fixture() {
    # Removes all definitions declared in a fixture
    # This should be called if the runner will execute another fixture

    unset setup
    unset prepare_fti
    unset runtest
    unset teardown

    type on_fixture_teardown &>/dev/null && on_fixture_teardown
    unset on_fixture_teardown
}

test_case_dry() {
    # Prepare a test for execution and print its info but do not execute it
    #
    # Parameters:
    # $@ The parameters to be passed to the fixture setup

    itf_param_clear    # Clear parameters from previous test case
    setup $@           # Call setup to declare arguments and other data
    itf_param_parse $@ # Parse the test case arguments an ddefine variables

    # Print feedback
    echo "$(itf_describe_test_case)"
}

test_case() {
    # Run a test defined in a fixture with a set of input data
    #
    # Parameters:
    # $@ The parameters to be passed to the fixture setup
    #
    # Returns:
    # Non-zero values if the test fails
    #
    # Detailed:
    # Run a test case until completion and checks if it failed.
    # If it fails, append the log into a file named after the test suite.

    # Create the FTI configfile based on the mock
    cat "$itf_cfg_template" >$itf_cfgfile

    test_case_dry $@

    # Prepare the FTI config file
    type prepare_fti &>/dev/null && prepare_fti

    # Execute the test fixture
    (
        # Test if ITF has any error stored
        if [ ! -z "$itf_error" ]; then
            itf_log_test_case $itf_tstdout
            echo "$itf_error" >>$itf_tstdout
            fail "$itf_error"
        fi
        # Setup the config file with standarized variable names
        itf_set_default_variables_to_config
        # Run the test
        runtest
    )
    local __exitcode=$?
    # Save logs if needed
    itf_append_logs $__exitcode

    # Call the test case teardown
    type teardown &>/dev/null && teardown

    # Remove the global, local and meta directories
    if [ $itf_maintain_ckpt -eq 0 ]; then
        local _locdir="$(fti_config_get 'ckpt_dir')"
        local _globaldir="$(fti_config_get 'glbl_dir')"
        local _metadir="$(fti_config_get 'meta_dir')"
        rm -rf $_locdir $_globaldir $_metadir
    fi

    # Reset the ranks into the default rank count
    itf_nranks=$itf_nranks_default

    # Remove the config files and test stdout
    rm -rf $itf_cfgfile $itf_tstdout
    # Return the test exit code
    return $__exitcode
}

# ---------------------------- Engine Log handling ----------------------------

itf_log() {
    # Logs an ITF message and print it to the user depending on ITF state
    #
    # Parameters:
    # $1: The message log level
    # $@: The message

    let __loglv=$1-1
    shift
    if [ $itf_verbose -gt $__loglv ]; then
        echo $@ | tee -a $itf_tstdout
    else
        echo $@ >> $itf_tstdout
    fi
    unset __loglv
}

itf_get_fixture_failure_log() {
    # Get the failure log filename for the current fixture

    echo "$itf_loaded_fixture-failed.log"
}

itf_get_fixture_full_log() {
    # Get the log filename for the current fixture

    echo "$itf_loaded_fixture-all.log"
}

itf_clear_logs() {
    # Delete all log files managed by ITF

    rm -rf "$(itf_get_fixture_failure_log)"
    rm -rf "$(itf_get_fixture_full_log)"
    rm -rf "$itf_report_log"
}

itf_log_test_case() {
    # Log the test case into a log file
    #
    # Parameters:
    # $1: The log file

    local _test_name=""
    for p in "${itf_paramv[@]}"; do
        _test_name="${_test_name}--$p ${!p} "
    done
    echo $_test_name >>$1
    echo "" >>$1 # new line feed
}

itf_append_logs() {
    # Append test case to the different logs based on the test status
    #
    # Parameters:
    # $1: The test status
    
    set -e

    # A log containing stdout of failed tests
    local faillog="$(itf_get_fixture_failure_log)"
    # A log containing stdout of successfull tests
    local normallog="$(itf_get_fixture_full_log)"

    # Check if the test has failed
    if [ $1 -ne 0 ]; then
        # Always push the test stdout into the log
        itf_log_test_case $itf_tstdout
        cat $itf_tstdout >>$faillog
        echo "" >>$faillog # line feed

        # Check if this is the first failure in the fixture
        if [ $itf_fixture_had_errors == 'false' ]; then
            itf_fixture_had_errors='true'
            # Push the fixture name into the ITF report
            echo $itf_loaded_fixture >>$itf_report_log
        fi

        # Log the test arguments into ITF report
        itf_log_test_case $itf_report_log
    fi

    # Check if ITF is configured to save all logs
    if [ $itf_maintain_app_logs -eq 1 ]; then
        itf_log_test_case $itf_tstdout
        cat $itf_tstdout >>$normallog
        echo "" >>$faillog # line feed
    fi

    set +e
}

# --------------------------- ITF Interal functions ---------------------------

itf_describe_test_case() {
    # Describe the current test case in terms of its arguments and values

    for p in "${itf_paramv[@]}"; do
        print_color $COLOR_BLUEBOLD "$p="
        # IOLib has a direct string representation
        if [ $p == 'iolib' ]; then
            print_color $COLOR_WHITEBOLD "$(iolib_id_to_name $iolib) "
        else
            print_color $COLOR_WHITEBOLD "${!p} "
        fi
    done
}

itf_find_fti_objects() {
    # Find checkpoint objects from last ITF-managed execution (app_run*)
    #
    # Parameters:
    #
    # $1: Which checkpoint object to find
    #       values: [ 'global', 'ckpt', 'partner', 'rs-encoding', 'node' ]
    # $@: which nodes to delete, for local, if IO is not MPIIO or SIONLIB
    #       values: node names
    #
    # Usage Details:
    #
    # When the object is 'global' returns:
    # - The L4 directory in the FTI Global archive
    # When the object is 'ckpt' returns:
    # - First local checkpoint file, in a given level, for every supplied node
    # When the object is 'partner' returns:
    # - First local partner file, in a given level, for every supplied node
    # When the object is 'rs-encoding' returns:
    # - First local RS-encoding, in a given level, for every supplied node
    # When the object is 'node' returns:
    # - Local node directory for every supplied node

    if [ ! $1 == 'global' ] && [ -z $level ]; then
        fail '$level variable must be set for ITF to delete checkpoint files'
    fi

    local _id=$(fti_config_get 'exec_id')
    local _erase_all='false'

    # Switch action depending on the checkpoint object suppllied
    case $1 in
    global)
        # When deleting from global, delete everything
        echo "$(fti_config_get 'glbl_dir')/$_id/l4"
        return 0
        ;;
    ckpt)
        local _what='Rank'
        ;;
    partner)
        local _what='Pcof'
        ;;
    rs-encoding)
        local _what='RSed'
        ;;
    node)
        # When erasing the node, we delete all local information
        _erase_all='true'
        ;;
    *)
        fail "checkpoint object type malformed $1, try one of the following: 'global', 'ckpt', 'partner' or 'rs-encoding', 'node'"
        ;;
    esac
    shift

    local _where="$(fti_config_get 'ckpt_dir')"
    local _files=""
    for i in $@; do
        if [ $_erase_all == 'true' ]; then
            _files="$_files $_where/$i"
        else
            _files="$_files $(find $_where/$i/$_id/l$level | grep "$_what" | head -n 1)"
        fi
    done
    echo "$_files"
}

itf_param_clear() {
    # Clear the set of parameters managed by ITF

    for i in ${itf_paramv[@]}; do
        unset $i
    done

    itf_error=""
    itf_paramv=()
}

itf_set_default_variables_to_config() {
    # Set up the config file using ITF standard variables names
    #
    # This method is always called after the test case 'setup'

    if [ ! -z $iolib ]; then
        fti_config_set 'ckpt_io' "$iolib"
    fi
    if [ ! -z $head ]; then
        fti_config_set 'head' "$head"
    fi
    if [ ! -z $keep ]; then
        fti_config_set 'keep_last_ckpt' "$keep"
    fi
    if [ ! -z $keepl4 ]; then
        fti_config_set 'keep_l4_ckpt' "$keepl4"
    fi
}

itf_param_parse() {
    # Parse the parameters passed against the ones registered in ITF
    #
    # Parametes:
    # $@ The parameters to be parsed
    #
    # Usage:
    # Use this function after registering the parameters with:
    # - param_register
    #
    # This function will parse the parameters and setup variables acordingly
    #
    # Example:
    # param_register 'iolib' 'head'
    # itf_param_parse --iolib 1 --head 0
    # echo $iolib # should output 1
    # echo $head # should output 0

    # Define all variables from input parameters
    while [ $# -gt 1 ]; do
        local _found='false'
        for p in ${itf_paramv[@]}; do
            if [ $1 == "--$p" ]; then
                eval $p=$2
                local _found='true'
            fi
        done
        if [ $_found == 'false' ]; then
            itf_error="Invalid argument $1"
            return 1
        fi
        shift
        shift
    done

    # Check if all required arguments were found
    for p in "${itf_paramv[@]}"; do
        if [ -z ${!p} ]; then
            itf_error="Argument '$p' not found"
            return 1
        fi
    done
}