#!/bin/bash
#   Copyright (c) 2017 Leonardo A. Bautista-Gomez
#   All rights reserved
#
#   @file   assertions
#   @author Alexandre de Limas Santana (alexandre.delimassantana@bsc.es)
#   @date   May, 2020

# --------------------------- Assertions public API ---------------------------

pass() {
    # Exit a test case successfully
    #
    # Parameters:
    # $1: An optional feedback message

    echo "$1" >"${itf_cfg['core:assert_msg_buf']}"
    exit 0
}

fail() {
    # Exit a test case in failure
    #
    # Parameters:
    # $1: An optional feedback message

    echo "$1" >"${itf_cfg['core:assert_msg_buf']}"
    exit 1
}

check_equals() {
    # Evaluates two values and fails the test if both are different
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    if [ $# -lt 2 ]; then
        fail "check_equals requires at least two arguments"
    fi

    if [ ! "$1" == "$2" ]; then
        fail "$3"
    fi
}

check_not_equals() {
    # Evaluates two values and fails the test if both are equal
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    if [ $# -lt 2 ]; then
        fail "check_not_equals requires at least two arguments"
    fi

    if [ "$1" == "$2" ]; then
        fail "$3"
    fi
}

check_is_zero() {
    # Fail the test if a given value is not zero
    #
    # Parameters:
    # $1: The first numerical value
    # $2: An optional message in case of failure

    if [ $# -lt 1 ]; then
        fail "check_is_zero requires at least one argument"
    fi

    if [ ! "$1" == "0" ]; then
        fail "$2"
    fi
}

check_non_zero() {
    # Fail the test if a given value is zero
    #
    # Parameters:
    # $1: The first numerical value
    # $2: An optional message in case of failure

    if [ $# -lt 1 ]; then
        fail "check_non_zero requires at least one argument"
    fi

    if [ "$1" == "0" ]; then
        fail "$2"
    fi
}

check_file_exists() {
    # Check if a file exists or fails otherwise
    #
    # Parameters:
    # $1: The file full name

    if [ $# -lt 1 ]; then
        fail "check_file_exists requires at least two arguments"
    fi

    if ! ls "$1" 1>/dev/null 2>&1; then
        fail "File not found: $1"
    fi
}

check_file_dont_exist() {
    # Check if a file does not exist or fails if it does
    #
    # Parameters:
    # $1: The file full name

    if [ $# -lt 1 ]; then
        fail "check_file_dont_exist requires at least two arguments"
    fi

    if ls "$1" 1>/dev/null 2>&1; then
        fail "File should not exist: $1"
    fi
}

assert_equals() {
    # Evaluates two values and pass the test if both are equals, fail otherwise
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    if [ $# -lt 2 ]; then
        fail "assert_not_equals requires at least two arguments"
    fi

    check_equals "$1" "$2" "$3"
    pass
}

assert_not_equals() {
    # Same as assert_equals but pass the test if both values are different
    #
    # Parameters:
    # $1: The first value
    # $2: Another value
    # $3: An optional message in case of failure

    if [ $# -lt 2 ]; then
        fail "assert_not_equals requires at least two arguments"
    fi

    check_not_equals "$1" "$2" "$3"
    pass
}

assert_file_exists() {
    # Pass the test if a given path represents a file, fail otherwise
    #
    # Parameters:
    # $1: The file path

    if [ $# -lt 1 ]; then
        fail "assert_file_exists requires at least one argument"
    fi

    check_file_exists "$1"
    pass
}

# ------------------------- ITF Assertion Private API -------------------------

itf_get_assert_msg() {
    # Get the assertion message stored in ITF buffer

    if [ -f "${itf_cfg['core:assert_msg_buf']}" ]; then
        cat "${itf_cfg['core:assert_msg_buf']}"
    fi
}

itf_clear_assert_msg() {
    # Clear the assertion message stored in ITF buffer

    rm -rf "${itf_cfg['core:assert_msg_buf']}"
}
