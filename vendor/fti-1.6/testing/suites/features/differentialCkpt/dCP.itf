#!/bin/bash
#   Copyright (c) 2017 Leonardo A. Bautista-Gomez
#   All rights reserved
#
#   @file   dCP.itf
#   @author Alexandre de Limas Santana (alexandre.delimassantana@bsc.es)
#   @author Kai Keller (kellekai@gmx.de) (First implementation)
#   @date   May, 2020

# ---------------------------- Bash Test functions ----------------------------

itf_load_module 'fti'

setup() {
    # Set up the common FTI variables for the checks in this suite

    itf_cfg['fti:nranks']=8
    fti_config_set_inline
    fti_config_set 'node_size' '2'
    fti_config_set "enable_dcp" '1'
    fti_config_set "dcp_mode" '1'
    fti_config_set 'ckpt_l1' '2'
    fti_config_set "dcp_block_size" '4096'
    fti_config_set "dcp_stack_size" '10'
}

standard_teardown() {
    # Remove the global variable needed in the standard check application

    unset TEST_MODE
}

standard() {
    # Brief:
    # Asserts that differential checkpointing encodes the right amount of data

    local app="$(dirname ${BASH_SOURCE[0]})/diff_test.exe"

    param_parse '+iolib' '+head' '+mode' $@

    fti_config_set 'ckpt_io' $iolib
    fti_config_set 'head' $head

    export TEST_MODE=$mode
    local mode_msg_count=15 # 2 per checkpoint id 6 plus 2 for begin/end plus 1 for DEBUG

    fti_run_success $app ${itf_cfg['fti:config']}

    awk '
        BEGIN {dcpEnabled=0};
        /L4 dCP requested, but dCP is disabled!/ {exit(-1)}
        /FTI  dCP Message/ {dcpEnabled=1};
        END { if ( !dcpEnabled ) {exit(-1)} } 
        ' ${itf_cfg['fti:app_stdout']}
    check_is_zero $? 'dCP is disabled'

    awk '
        BEGIN {VAL=100;};
        /DEBUG/ {VAL=$10}; 
        /Total CP data/ && (($19*1.0)<VAL || ($19*1.0)>(VAL+2)) {exit(-1)}; 
        /Ckpt. ID 7/ {VAL=0}
        ' ${itf_cfg['fti:app_stdout']}
    check_is_zero $? 'dCP encoded size differ'

    check_equals "$(grep $mode ${itf_cfg['fti:app_stdout']} -ic)" $mode_msg_count \
        'There should be dCP messages for every rank'
    fti_run_success $app ${itf_cfg['fti:config']}
    pass
}

corrupt_check() {
    # Brief:
    # Asserts that FTI is able to recover from corrupted DCP data

    param_parse '+recovery' $@

    local app="$(dirname ${BASH_SOURCE[0]})/checkDCPPosix.exe"
    local crash_on_iter=1
    local diffsizes=0

    recovery=1
    if [ $recovery == 'FTI_Recover' ]; then
        recovery=0
    fi

    fti_config_set 'ckpt_io' '1' # POSIX
    fti_config_set "head" '0'

    fti_run_success $app ${itf_cfg['fti:config']} $crash_on_iter $diffsizes $recovery

    for i in $(seq 1 6); do
        fti_run_success $app ${itf_cfg['fti:config']} $i $diffsizes $recovery
        local exec_id="$(fti_config_get 'exec_id')"
        local global_dir="$(fti_config_get 'glbl_dir')"

        if [ "$i" -ne "6" ]; then
            local rank=$(echo $((RANDOM % ${itf_cfg['fti:nranks']})))
            local bytesToRemove=$(echo $((RANDOM % (10 * 1024 * 1024))))
            local corruptedFile="$global_dir/$exec_id/dCP/dcp-id0-rank$rank.fti"
            truncate -s -$bytesToRemove $corruptedFile
        fi
    done
    grep -q "\[SUCCESSFUL\]" ${itf_cfg['fti:app_stdout']}
    assert_equals $? 0 'FTI should recover from corrupted data'
}

# -------------------------- ITF Register test cases --------------------------

itf_fixture 'standard' 'setup' 'standard_teardown'
itf_setup 'corrupt_check' 'setup'

# Add test cases for the standard checks
for iolib in 1 3; do
    for head in 0 1; do
        for mode in 'NOICP' 'ICP'; do
            itf_case 'standard' "--iolib=$iolib" "--head=$head" "--mode=$mode"
        done
    done
done

# Add test cases for the Posix-corrupt checks
for recovery in FTI_Recover FTI_RecoverVar; do
    itf_case 'corrupt_check' "--recovery=$recovery"
done

unset iolib head mode recovery
